"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
from pathlib import Path
from environs import Env

env = Env()
env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', True)

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'tabbed_admin',
    'modeltranslation',
    'polymorphic_tree',
    'polymorphic',
    'mptt',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'rest_framework',
    'garpix_package',
    'garpix_utils',
    'garpix_page',
    'app',
    'eqator',
    'garpix_admin_lock',
    'django.contrib.admin',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware'
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB'),
        'USER': env('POSTGRES_USER'),
        'PASSWORD': env('POSTGRES_PASSWORD'),
        'HOST': env('POSTGRES_HOST'),
        'PORT': env.int('POSTGRES_PORT'),
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = os.path.join(BASE_DIR, '..', 'public', 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'public', 'media')

TEMPLATES_PATH = os.path.join(BASE_DIR, '..', 'frontend', 'templates')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '..', 'frontend', 'static'),
]

SITE_ID = 1

LANGUAGE_CODE = 'en'
USE_DEFAULT_LANGUAGE_PREFIX = False

LANGUAGES = (
    ('en', 'English'),
    ('de', 'German'),
    ('ru', 'Russian'),
    ('zh-hans', 'Chinese'),
)

# migrations

MIGRATION_MODULES = {
    'garpix_page': 'app.migrations.garpix_page',
    'garpix_admin_lock': 'app.migrations.garpix_admin_lock',
}

GARPIX_PAGE_ADMIN_LIST_PER_PAGE = 25
GARPIX_PAGE_GLOBAL_CONTEXT = 'garpix_page.contexts.global_context.global_context'

API_URL = 'api'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'app_cache_table',
    }
}

TEST_COVERAGE_RATE = 40

GRAPESJS_SAVE_ASSETS_TO_FILE = True

GARPIXCMS_CELERY_SETTINGS = 'app.celery.app'
GARPIX_PAGE_CHILDREN_LEN = 10

INTERVAL_COUNT = int(os.getenv('LOGGER_INTERVAL_COUNT', 1))
BACKUP_COUNT = int(os.getenv('LOGGER_BACKUP_COUNT', 7))
WHEN = os.getenv('LOGGER_WHEN', 'D')
ISO_LOGS_NAME = "garpix_page"
IB_ISO_LOGS_NAME = "garpix_page_ib"
SYSTEM_ISO_LOGS_NAME = "garpix_page_system"
ISO_LOGS_PRODUCT = "Garpix Page"


class GenerateFilesLogsData:
    """ Генератор файлов для сельдерея """

    def __init__(self, file_name):
        self.file_name = file_name

    def __generate_logs_file(self):
        directory = f'logs/{self.file_name}'
        if not os.path.isdir(directory):
            os.makedirs(directory)
        return f'{directory}/{self.file_name}.log'

    @classmethod
    def execute(cls, file_name):
        return cls(file_name).__generate_logs_file()


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)-4s %(name)-12s %(levelname)-12s %(message)s'
        },
        'file': {
            'format': '%(asctime)-4s %(name)-12s %(levelname)-12s %(message)s'
        },
        'file_iso': {
            '()': 'django.utils.log.ServerFormatter',
            'format': f'%(message)s'
        }
    },
    'handlers': {
        ISO_LOGS_NAME: {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'backupCount': BACKUP_COUNT,
            'formatter': 'file_iso',
            'interval': INTERVAL_COUNT,
            'when': WHEN,
            'filename': GenerateFilesLogsData.execute(ISO_LOGS_NAME),
        },
        IB_ISO_LOGS_NAME: {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'backupCount': BACKUP_COUNT,
            'formatter': 'file_iso',
            'interval': INTERVAL_COUNT,
            'when': WHEN,
            'filename': GenerateFilesLogsData.execute(IB_ISO_LOGS_NAME),
        },
        SYSTEM_ISO_LOGS_NAME: {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'backupCount': BACKUP_COUNT,
            'formatter': 'file_iso',
            'interval': INTERVAL_COUNT,
            'when': WHEN,
            'filename': GenerateFilesLogsData.execute(SYSTEM_ISO_LOGS_NAME),
        }
    },
    'loggers': {
        ISO_LOGS_NAME: {
            'handlers': [ISO_LOGS_NAME],
            'level': 'INFO',
            'propagate': False
        },
        IB_ISO_LOGS_NAME: {
            'handlers': [IB_ISO_LOGS_NAME],
            'level': 'INFO',
            'propagate': False
        },
        SYSTEM_ISO_LOGS_NAME: {
            'handlers': [SYSTEM_ISO_LOGS_NAME],
            'level': 'INFO',
            'propagate': False
        }
    }
}


MPTT_ALLOW_TESTING_GENERATORS=True
